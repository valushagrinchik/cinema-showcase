# Тестовое задание фулстек

Вы делаете админ панель для управления витриной кинотеатра. В ней есть возможность создавать категории и подкатегории фильмов. Каждому фильму может быть присвоено несколько подкатегорий.

Необходимо реализовать

- страницу отображающую список категорий, их подкатегорий и названий фильмов находящихся в подкатегории.
- форму редактирования категории/добавления новой категории. На ней есть возможность
    - добавить новую подкатегорию
    - удалить существующую подкатегорию
    - редактирование списка фильмов подкатегории с возможностью добавить новый фильм из списка доступных или удалить фильм из подкатегории
- API для получения и сохранения данных на сервер

## Страница со списком категорий

На странице отображается список категорий и данных о них.

Какие данные о категории отображаем:

- название
- название подкатегории
- список фильмов находящихся в подкатегории

Изначальная загрузка данных происходит с сервера.

По кнопке “Сохранить на сервер” все несохраненные изменения со страницы должны отправляться на сервер.

### Пример отображения данных

[Добавить категорию] [Сохранить на сервер]

Категория 1 (редактировать)

Подкатегория 11

фильм 1

фильм 2

Подкатегория 12

фильм 3

Подкатегория 13

---

Категория 2 (редактировать)

Подкатегория 21

фильм 4

Подкатегория 22

---

## Форма редактирования категории/добавления новой категории.

Результат формы сохраняется в браузере и немедленно отображается в списке категорий.

Данные сохраняются в локальном стейте веб приложения

### Пример формы создания/редактирования категории

Инпут с именем категории

Инпут с именем подкатегории 1 

фильм 1 (удалить)

фильм 2 (удалить)

[Добавить фильм]

Инпут с именем подкатегории 2

фильм 3 (удалить)

фильм 4 (удалить)

[Добавить фильм]

[Добавить подкатегорию]

## API сервера

Позволяет получить список фильмов и категорий

Доступные методы:

- получить список фильмов
- получить список категорий
- обновить список категорий на сервере

Метод обновляющий список категорий принимает следующие параметры:

- newCategories. категории которые были созданы. список объектов категорий с подкатегориями и id фильмов из подкатегорий
- updatedCategories. категории ранее существовавшие на сервере, но измененные в ходе редактирования
- deletedCategories. список идентификаторов удаленных категорий

Пример параметров

```jsx
{
	newCategories: [
		{
			name: "",
			subCategories: [
				{
					name: "",
					filmIds: []
				}
			]
		},
		{...}
	],
	updatedCategories: [
		{
			id: "",
			name: "",
			updatedSubCategories: []
			deletedSubCategories: []
		},
		{...}
	],
	deletedCategories: [
		{
			id: ""
		},
		{...}
	]
	}
```

# Структура сущностей

- фильм
    - id в базе данных
    - название
- категория
    - id в базе данных. Новые категории не имеют id (или id = null) до сохранения на сервере
    - название
    - массив подкатегорий
        - id в базе данных. Новые подкатегории не имеют id (или id = null) до сохранения на сервере
        - название
        - массив id фильмов отнесенных в эту подкатегорию

# Исходный набор данных

Пример как фильмы, категории и подкатегории соотносятся между собой. Его же можно использовать как пресет данных для сервера

```jsx
{
  "films": [
    {
      "id": 1,
      "name": "The Matrix"
    },
    {
      "id": 2,
      "name": "Inception"
    },
    {
      "id": 3,
      "name": "Interstellar"
    },
    {
      "id": 4,
      "name": "The Dark Knight"
    },
    {
      "id": 5,
      "name": "Pulp Fiction"
    }
  ],
  "categories": [
    {
      "id": 1,
      "name": "Action",
      "subCategories": [
        {
          "id": 101,
          "name": "Sci-Fi",
          "filmIds": [1, 2, 3]
        },
        {
          "id": 102,
          "name": "Superheroes",
          "filmIds": [1, 2, 4]
        }
      ]
    },
    {
      "id": 2,
      "name": "Drama",
      "subCategories": [
        {
          "id": 201,
          "name": "Historical",
          "filmIds": [1, 3, 5]
        },
        {
          "id": 202,
          "name": "Romance",
          "filmIds": [2, 3, 5]
        }
      ]
    }
  ]
}

```

# Требования к тех стеку

Postgresql
Nodejs или Ruby

React 18

Без использования внешних библиотек управления состоянием. только то, что есть в React

UI фреймворк: Mui 6 https://github.com/mui/material-ui будет плюсом, но можно использовать любой знакомый фреймворк

# Требования к тестам

Обязательно покрытие тестами логики обновления данных о категориях на сервере